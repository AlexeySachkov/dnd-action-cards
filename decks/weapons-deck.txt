; LINK = ..\data\magic-weapons-1.csv
LINK = ..\data\Weapons.csv
LINK = ..\data\Nala-Drachedandion.csv
LINK = ..\data\Nala-Drachedandion-inventory.csv

PAGE = 21, 29.7, LANDSCAPE
[CARD_WIDTH] = 5.7
[CARD_HEIGHT] = 8.9
; How far away the card content should be from a card borders
[CARD_MARGIN] = 0.2
[CONTENT_WIDTH] = [CARD_WIDTH] - 2 * [CARD_MARGIN]
CARDSIZE = [CARD_WIDTH], [CARD_HEIGHT]
DPI = 600

FOOTER = , [CharacterName], RIGHT

; We generate 2x cards:
; - the first set is the main one
; - the second set is for minor action for light weapons
CARDS = {2 * (Name)}

; List character's inventory here (comma-separated)
; [inventory] = RANGELABEL("Greataxe,Handaxe,Javelin,Quarterstaff,Shortbow")
; Sequence of card numbers which are present in the inventory
[main_indexes_sequence] = LOOKUP([ItemName], [Name])
; Range of cards which are present in the inventory
[main_range] = RANGELABEL([main_indexes_sequence])

; Range of all light weapons
[light_weapons_range] = LABELRANGE([Properties], "*light*")
; Range of light weapons which are present in the inventory
[inventory_light_weapons_range] = RANGEINT([light_weapons_range], [main_range])
; If character has no light weapons in their inventory, the range above will be
; empty and it won't be possible to convert it to a sequence using RANGELABEL
; function
[number_of_light_weapons_in_inventory] = RANGECOUNT([inventory_light_weapons_range])
[more_than_zero_light_weapons_in_inventory] = [number_of_light_weapons_in_inventory]>0

; Same as above, but sequence
[inventory_light_weapons_sequence]%[more_than_zero_light_weapons_in_inventory] = RANGELABEL([inventory_light_weapons_range])
[inventory_light_weapons_sequence]%=

; Range of cards which are present in the inventory, but taken from the second
; half of the deck that is intended for bonus action cards (light weapons)
[bonus_range] = RANGELABEL({[inventory_light_weapons_sequence] + (Name)})

; Merging both ranges
[to_use] = RANGEINS([main_range], {(ItemName)}, [bonus_range], 1)

; Remove the line below to print all the cards
; TODO: check if it is possible to use LINKFILTER instead
RENDER = ,,,[to_use]
PRINT = [to_use]

BORDER = ROUNDED, #202020, 0.2, SOLID

FONT="Mr Eaves SC Remake Medium",12,T,#000000
TEXT = , [Name], [CARD_MARGIN], 0, [CONTENT_WIDTH], 0.9

; Icon on the left describing whether this is an Action or a Bonus Action
; FIXME: if there is only one weapon in .csv file, both icons are displayed
POLYGON = [bonus_range], 0.3, 0.2, 0.6, 0.6, 3, 0, #FF6600
CIRCLE = [main_range], 0.3, 0.2, 0.5, 0.5, #006600

LINE = , [CARD_MARGIN], 0.81, [CARD_WIDTH] - [CARD_MARGIN], 0.81, #000000, 0.02

HTMLFONT = B10, "Bookinsanity Remake", 10, B, #000000
HTMLFONT = R8, "Bookinsanity Remake", 8, , #000000
HTMLFONT = I8, "Bookinsanity Remake", 8, I, #000000
HTMLFONT = B8, "Bookinsanity Remake", 8, B, #000000

; Image d0 is a placeholders for special weapons that have no damage,
; or if their damage is not associated with any dice.
; TODO: align images with the text better. It may require using a different
; environment
HTMLIMAGE = , dice_img0, "..\assets\d0.png", 0.5, 0.5, P
HTMLIMAGE = , dice_img4, "..\assets\d4.png", 0.5, 0.5, P
HTMLIMAGE = , dice_img6, "..\assets\d6.png", 0.5, 0.5, P
HTMLIMAGE = , dice_img8, "..\assets\d8.png", 0.5, 0.5, P
HTMLIMAGE = , dice_img10, "..\assets\d10.png", 0.5, 0.5, P
HTMLIMAGE = , dice_img12, "..\assets\d12.png", 0.5, 0.5, P
HTMLIMAGE = , dice_img20, "..\assets\d20.png", 0.5, 0.5, P

IF = INDEX("two-handed", [Properties]) > 0
HTMLTEXT = , "<B10>Attack</B10> <I8>(use both hands)</I8>", [CARD_MARGIN], 1, [CONTENT_WIDTH], 10%
ELSEIF = INDEX("thrown", [Properties]) > 0
HTMLTEXT = [main_range], "<B10>Attack/throw</B10> <I8>(use the main hand)</I8>", [CARD_MARGIN], 1, [CONTENT_WIDTH], 10%
HTMLTEXT = [bonus_range], "<B10>Attack/throw</B10> <I8>(use the second hand)</I8>", [CARD_MARGIN], 1, [CONTENT_WIDTH], 10%
ELSE
HTMLTEXT = [main_range], "<B10>Attack</B10> <I8>(use the main hand)</I8>", [CARD_MARGIN], 1, [CONTENT_WIDTH], 10%
HTMLTEXT = [bonus_range], "<B10>Attack</B10> <I8>(use the second hand)</I8>", [CARD_MARGIN], 1, [CONTENT_WIDTH], 10%
ENDIF

[ATK_ability_flag] = JOINIF(, "ranged", @, [Type], "D", "S")
; Contains (@) doesn't work here, because it expects a sequence on the right,
; but a weapon properties are represented as a single string
; [ATK_ability_flag] = JOINIF([ATK_ability_flag], "finesse", @, [Properties], "D")
[ATK_ability_flag] = JOINIF([ATK_ability_flag], INDEX("finesse", [Properties]), >, 0, "D")

; ranged weapons
[ATK_ability] = JOINIF(, [ATK_ability_flag], =, "D", [DEX])
; finesse ranged weapons
[ATK_ability] = JOINIF([ATK_ability], [ATK_ability_flag], =, "DD", CALC(M, [STR], [DEX]))
; meleee weapons
[ATK_ability] = JOINIF([ATK_ability], [ATK_ability_flag], =, "S", [STR])
; finesse melee weapons
[ATK_ability] = JOINIF([ATK_ability], [ATK_ability_flag], =, "SD", CALC(M, [STR], [DEX]))


; TODO: A character may not be proficient with a weapon
[ATK_MOD] = ROUND({([ATK_ability] - 10) / 2 + [ProficiencyBonus] + [Bonus]}, 0, DOWN)
[sign] = JOINIF(,[ATK_MOD], >, 0, " + ", "")
[sign] = JOINIF([sign], [ATK_MOD], <, 0, " - ", "")

; Note: 'JOIN' should be used instead of 'CONCAT' is sequences are involved
HTMLKEY = , "attack_formula", JOIN("d20 ", [sign], CALC(A, [ATK_MOD])), B10
HTMLTEXT = , "<center>dice_img20 attack_formula</center>", [CARD_MARGIN], 1.45, [CONTENT_WIDTH], 10%
HTMLTEXT = , "<B10>Damage</B10> <I8>({{DamageType?}})</I8>", [CARD_MARGIN], 1.95, [CONTENT_WIDTH], 10%

; TODO: weapons with no damage (Net)
[dice_prefix] = JOINIF(,[DamageDiceMultiplier], >, 1, [DamageDiceMultiplier],)
[DMG_MOD] = ROUND({([ATK_ability] - 10) / 2 + [Bonus]}, 0, DOWN)
[sign] = JOINIF(,[DMG_MOD], >, 0, " + ", "")
[sign] = JOINIF([sign], [DMG_MOD], <, 0, " - ", "")
IF = [DamageDiceMultiplier] > 0
HTMLKEY = [main_range], "damage_formula", JOIN([dice_prefix], "d", [DamageDice], [sign], CALC(A, [DMG_MOD])), B10
HTMLKEY = [bonus_range], "damage_formula", JOIN([dice_prefix], "d", [DamageDice]), B10
HTMLTEXT = , "<center>REPEAT(dice_img{{DamageDice?}}, {{DamageDiceMultiplier?}}) damage_formula</center>", [CARD_MARGIN], 2.4, [CONTENT_WIDTH], 10%
ELSE
; TODO: should ability modifier be added to such weapons? (Blowgun)
HTMLKEY = , "damage_formula", "{{DamageDice?}}", B10
HTMLTEXT = , "<center>damage_formula</center>", [CARD_MARGIN], 2.4, [CONTENT_WIDTH], 10%
ENDIF

[versatile_dice_prefix] = JOINIF(,[VersatileDamageDiceMultiplier], >, 1, [VersatileDamageDiceMultiplier])
HTMLKEY = , "versatile_formula", JOIN([versatile_dice_prefix], "d", [VersatileDamageDice], [sign], CALC(A, [DMG_MOD])), B10

IF = INDEX("versatile", [Properties]) > 0
HTMLTEXT = , "<B10>Or, attack</B10> <I8>(use both hands)</I8>", [CARD_MARGIN], 3.15, [CONTENT_WIDTH], 10%
HTMLTEXT = , "<center>dice_img20 attack_formula</center>", [CARD_MARGIN], 3.6, [CONTENT_WIDTH], 10%
HTMLTEXT = , "<B10>Damage</B10> <I8>({{DamageType?}})</I8>", [CARD_MARGIN], 4.1, [CONTENT_WIDTH], 10%
HTMLTEXT = , "<center>dice_img{{VersatileDamageDice?}} versatile_formula</center>", [CARD_MARGIN], 4.5, [CONTENT_WIDTH], 10%
HTMLTEXT = , "<R8>{{ExtraText?}}</R8>", [CARD_MARGIN], 5.2, [CONTENT_WIDTH], 30%
ELSE
; TODO: develop a mechanism to automatically calculate Y position
HTMLTEXT = , "<R8>{{ExtraText?}}</R8>", [CARD_MARGIN], 3, [CONTENT_WIDTH], 30%
ENDIF

HTMLTEXT = , "<B8>Cost:</B8> <R8>{{Cost?}}</R8><br><B8>Weight:</B8> <R8>{{Weight?}} lb.</R8>", [CARD_MARGIN], 7.2, [CONTENT_WIDTH], 10%

LINE = , [CARD_MARGIN], 7.95, [CARD_WIDTH] - [CARD_MARGIN], 7.95, #000000, 0.02
FONT="Bookinsanity Remake",10,IT,#000000
[UPD_Type] = CASESTRING([Type], L)
[UPD_Proficiency] = CASESTRING([Proficiency], F)
[top_line] = JOIN([UPD_Proficiency], " ", [UPD_Type], " weapon")
IF = "Ranged" = [Type]
TEXT = , "{UPD_Proficiency?} {UPD_Type?} weapon ({Range?})", [CARD_MARGIN], 8, [CONTENT_WIDTH], 10%, center, top
ELSE
TEXT = , "{UPD_Proficiency?} {UPD_Type?} weapon", [CARD_MARGIN], 8, [CONTENT_WIDTH], 10%, center, top
ENDIF
; ";" can't be used directly, but instead its ANSII encoding should be used
[UPD_Properties] = CASESTRING(REPLACE([Properties], "\59\", ", "), F)
[UPD_Properties] = REPLACE([UPD_Properties], "Thrown", "Thrown ({Range?})")
TEXT = , [UPD_Properties], [CARD_MARGIN], 8.35, [CONTENT_WIDTH], 10%, center, top

